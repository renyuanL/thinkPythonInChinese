..  Copyright (C)   彼得·溫特沃斯，杰弗裡Elkner，艾倫B.唐尼和克里斯·邁爾斯。
    權限授予複製，分發和/或修改本文件。
    在GNU自由文檔許可證1.3版的條款
    或由自由軟件基金會以後出版的新版本;
    與固定段落是前言，序言和貢獻者名單，沒有
    封面文字和封底文本。許可證副本
    包含在題為"GNU自由文件授權協議」一節。

|
    
字串
=======

.. index:: 複合資料型態，字母，下標運算子，索引

複合資料型態
--------------------

到目前為止，我們已經看到了內建型態像是 ``int (整數)``， ``float (浮點數)``， 
``bool(布林數)`` 以及 ``str(字串)`` 等等，而且我們也已經看到 列表 和 對子。 
字串、列表以及對子彼此之間有些本質上的差異，因為他們
是由更小的部分所組成。以字串來說，它們的最小組成
成分僅包含了單一 **字母** 。  

這種包含了更小塊的資料型態者，被稱為 **複合資料型態**
根據我們所做的事的差異性，我們可能要視待處理的複合資料型態為
單一物件，或者我們也可能要能存取它的更小部分。這 2 種情境都是非常有用的。

把字串看作單一物件
-------------------------------------

我們之前看到的，每個龜實例都有其自己的屬性和 
許多可應用到該實例的方法。例如，
我們可以設置龜的顏色，我們寫了`` tess.turn（90）``。  

就像一隻烏龜，一個字符串也是一個對象。因此，每個字符串實例
有它自己的屬性和方法。  

例如：

    .. sourcecode:: python3

        >>> ss ="你好，世界！"
        >>> tt = ss.upper（）
        >>> tt 
        "你好，世界！"
    
`` ``上部是一個可以在任何字符串對象調用的方法 
創建一個新的字符串，其中所有的 
字符都是大寫的。（原始字符串`` `` ss保持不變。）

還有一些方法如`` ``較低，`` ``資本化，並
`` ``的swapCase是做其他有趣的東西。

要了解哪些方法可用，您可以諮詢幫助文檔，查找 
字符串的方法，以及閱讀文檔。或者，如果你是一個有點懶惰，
只需鍵入以下成PyScripter腳本： 

    .. sourcecode:: python3
        :linenos:
        
        ss ="你好，世界！"
        tt = ss。
    
當您鍵入句點來選擇的`` `` ss的方法之一，PyScripter會彈出一個 
選擇窗口中顯示的所有方法（有其中約70 ---謝天謝地，我們只
使用幾個這個，可以在您的字符串使用！）。 

    .. image::  illustrations/ string_methods.png
 
當您鍵入方法的名稱，有關它的參數和返回一些進一步的幫助
型，它的文檔字符串，將被顯示。這是一個工具，一個很好的例子--- PyScripter ---
使用元信息---文檔字符串---由模塊的程序員提供。 

    .. image::  illustrations/ swapcase.png

存取字串中的更小部分
----------------------------------

在**索引操作符**（Python使用方括號括起來的索引） 
選擇某一個字符的字符串子串：

    .. sourcecode:: python3
        
        >>>水果= "香蕉"
        >>> m= 水果[1]
        >>>印（m）

        
表達``果[1]選擇`` ``從``水果字符數字1，並創建一個新的
字符串只包含這一個字。可變`` ``米指的是結果。
當我們顯示`` ``米，我們可以得到一個驚喜： 

    .. sourcecode:: python3

        蕉

計算機科學家總是開始計數
從零！在``"香蕉"下標位置零信``是`` `` b。因此，在
位置`` [1] ``我們有信``一個``。

如果我們要訪問一個字符串的零ETH信，我們只需將0，
或計算結果為0，插圖中的括號內的表達式：

    .. sourcecode:: python3
        
        >>> m= 水果[0]
        >>>印刷（m）
        香

括號中的表達式被稱為**指數**。索引指定的成員
的有序集合的，在這種情況下字符的字符串中的集合。該指數
*表示*你想要哪一個，故名。它可以是任何整數
表達。

我們可以用`` ``枚舉可視化的指標：

    .. sourcecode:: python3

        >>>水果= "香蕉"
        >>>list(enumerate(水果))
        [(0, '香'), (1, '蕉')]

不要擔心`` ``列舉在這一點上，我們將看到更多的它
在列表中的章節。

需要注意的是索引返回一個字符串，* * --- Python有沒有特殊型態的單個字符。
它是一個長度為1的只是一個字符串。

我們也看到列出以前。相同的索引符號的作品來提取元素
列表： 

    .. sourcecode:: python3

        >>> 質數列 = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]
        >>> 質數列[4]
        11
        >>> 朋友列= ["喬"，"佐伊"，"布拉德"，"安吉"，"ZUKI"，"Thandi"，"巴黎"]
        >>>朋友[3]
        "安吉"


.. index::
    single: len 函數
    single: 功能; len
    single: 執行階段錯誤
    single: 負索引值
    single: 索引值; 負

長度函數 len()
------

``len`` 函數，當運用到一個字串時，會傳回在字串中字母的個數。

    .. sourcecode:: python3
        
        >>>水果= "香蕉"
        >>> len（水果）
        2

為了得到一個字串的最後一個字母，你可能會想嘗試一些像
下列的程式碼：

    .. sourcecode:: python3
        :linenos:
        
        sz = len（水果）
        最後字= 水果[sz] # 錯誤！

這是行不通的。它會導致執行階段錯誤
``IndexError: string index out of range`` 其原因是，沒有
字符在``"香蕉"``索引值為 6 這個位置。 
因為我們從 0 開始計數， 6 個索引
編號為 0 到 5。若要取出獲得最後一個字，
我們必須把 ``水果 `` 的長度 減 1:

    .. sourcecode:: python3
        :linenos:
            
        sz = len（水果）
        最後字= 水果[sz-1]

或者，我們可以使用 **負索引值** ，它從 該字串的結尾 倒數回來。
這個式子 ``水果[-1] `` 會產生出最後一個字，
而 ``水果[-2]`` 則產生倒數第二的字，依此類推。

你可能已經猜到了，負索引值 除了在字串中使用以外，也同時適用於列表。 

在本書中，我們不會常常使用負索引值 --- 原因是並非很多程式語言
允許這樣用，所以本書作者建議你少用這種語法。但你也要了解到現存的大量的
Python 程式碼中，有許多人喜歡使用這一招，所以你最好知道它的存在。 

.. index:: 遍歷，for 迴圈，串聯，初學者系列

.. index:: 
    single: 麥克洛斯基，羅伯特
    single: 為小鴨讓路    

遍歷 以及 ``for`` 迴圈
------------------------------

大量的計算在一個時間涉及一種處理字符串的一個字符。
通常他們從頭開始，依次選擇每一個字符，有所為有所不為
它，並持續到年底。處理這種模式被稱為
**遍歷**。一個遍歷編碼的一種方法是用一個`` ``同時聲明：

    .. sourcecode:: python3
        :linenos:
             
        ㈨= 0
        而九<LEN（水果）：
            信=水果[九]
            打印（信）
            IX + = 1

這個循環遍歷某行上的字符串，並顯示每個字母本身。
循環條件是`` IX <LEN（水果）``，所以當`` `` IX是等於
字符串的長度，條件為假，循環體不
執行。訪問的最後一個字符是一個與索引
`` LEN（水果）-1 ``，這是字符串中的最後一個字符。

但我們前面已經看到了如何的`` ``為循環可以很容易地遍歷
在列表中的元素，它可以這樣做字符串，以及：

    .. sourcecode:: python3
        :linenos:
        
        對於C的水果：
            打印（三）

通過每次循環中，字符串的下一個字符被分配給
變量`` ``Ç。該循環繼續，直到沒有字符被留下。在這裡，我們
可以看到表現力的`` ``為循環使我們較
在遍歷字符串時循環。

下面的示例顯示了如何使用級聯和一個`` ``用於向循環
產生一個初學者系列。初學者指一系列或列表，其中
元素按字母順序顯示。例如，在羅伯特·麥克洛斯基的
本書*讓路雛鴨*，小鴨的名字是傑克，KACK，缺乏，
麥克，NACK Ouack，包，嘎嘎。這種循環才能輸出這些名字：

    .. sourcecode:: python3
        :linenos:
        
        前綴="JKLMNOPQ"
        後綴="確認"
           
        對p的前綴：
            打印（P +後綴）

該程序的輸出為： 
 
    .. sourcecode:: Python會議上 

            千斤頂
            KACK
            缺乏
            麥克
            NACK
            Oack
            包
            QACK


當然，這並不完全正確，因為Ouack和嘎嘎拼寫錯誤。
你會解決這個問題，如下練習。


..指數::切片，切片的字符串，字符串，子列表

片
------

一個字符串的*子*是通過採取**片**獲得。同樣，我們可以
切片的列表來引用的列表中的項目的一些子表：

    .. sourcecode:: python3
        
        >>> S ="加勒比海盜"
        >>>打印（S [0:7]）
        盜
        >>>打印（S [11:14]）
        該
        >>>打印（S [15:24]）
        加勒比的
        >>>朋友= ["喬"，"佐伊"，"布拉德"，"安吉"，"ZUKI"，"Thandi"，"巴黎"]
        >>>打印（朋友[2:4]）
        ['布拉德'，'安吉']

操作`` [N：M] ``從第n個字符返回字符串的一部分
到第m個字符，包括第一，但不包括最後。這
行為是有道理的，如果你想像的指數
指向*之間*的字符，如下面的圖：

    .. image::  illustrations/ banana.png
       ：ALT：'香蕉'字符串

如果你能想像這是一張紙，切片操作符`` [N：M] ``拷貝出來
了``Ñ``和`` ``米位置之間的文件的部分。提供``米``和`` ``Ñ是
這兩個字符串的範圍內，您的結果將是長度（分鐘）的。
   
三板斧被添加到這一點：如果你省略了第一個索引（冒號之前）， 
切片起始於字符串（或列表）的開頭。如果省略了第二個索引，
片延伸到字符串的末尾（或列表）。同樣，如果你​​提供的價值
`` ``Ñ是大於字符串（或列表）的長度，切片將採取一切 
值高達末端。（它不會給一個"超出範圍"錯誤像正常索引操作
一樣），因此：

    .. sourcecode:: python3
        
        >>>水果="香蕉"
        >>>水果[：3]
        "禁令"
        >>>水果[3]
        '模擬'
        >>>水果[3:999]
        '模擬'

你覺得`` S [：] ``手段？怎麼樣``朋友[4：] ``？


..指數：字符串比較，比較的字符串

字符串比較
-----------------

比較操作符對字符串的工作。看到兩個字符串是否相等：

    .. sourcecode:: python3
        :linenos:
        
        如果字=="香蕉"：
            打印（"是的，我們沒有香蕉！"）

其他比較操作是把單詞放在有用
``字典順序：

    .. sourcecode:: python3
        :linenos:
        
        如果字<"香蕉"：
            打印（"你的話，"+字+"，香蕉來之前。"）
        elif的話>"香蕉"：
            打印（"你的話，"+字+"，來自香蕉之後。"）
        其他：
            打印（"是的，我們沒有香蕉！"）

這是類似的字母順序，你會用字典使用，
除了所有的大寫字母來所有的小寫字母之前。如
結果：

    .. sourcecode:: Python會議上
        
        你的話，斑馬，香蕉來之前。

要解決這個問題的常用方法是將字符串轉換為標準
格式，如全部小寫，在進行比較之前。更
棘手的問題是使程序實現了斑馬不是水果。


..指數：可變的，一成不變的，運行時錯誤

字符串是不可變
---------------------

這是很有誘惑力的使用`` [] ``運營商在賦值的左側，
不斷變化的一個字符在一個字符串的意圖。例如：

    .. sourcecode:: python3
        :linenos:
        
        問候語="你好，世界！"
        問候[0] ='J'＃錯誤！
        打印（賀卡）

而不是產生輸出的``爽，世界！``，這個代碼生成
運行時錯誤``型態錯誤：'海峽'對象不支持項目分配``。

字符串是不可變的** **，這意味著你不能改變現有的字符串。該
最好你可以做的是創建一個新的字符串，它是在原有的變化：

    .. sourcecode:: python3
        :linenos:
        
        問候語="你好，世界！"
        new_greeting ="J"+問候語[1：]
        打印（new_greeting）

這裡的解決方案是串接一個新的首字母上分一杯羹
`` ``問候。此操作對原始字符串沒有影響。


.. ::指數
    單：在運營商
    單：操作員;在

在中``和``不`` ``運營商
-----------------------------------

了`` ``在運營商測試會員。當兩個參數`` ``中
是字符串，`` ``在檢查左側參數是否是正確的子串
的說法。

    .. sourcecode:: python3
        
        在"蘋果">>>"P"
        真
        >>>"我"在"蘋果"
        假
        在"蘋果">>>"AP"
        真
        在"蘋果">>>"啪"
        假

請注意，字符串是其自身的子串，空字符串是一個 
子字符串的任何其他字符串。（另請注意，計算機科學家
喜歡去想這些邊緣情況相當慎重！） 

    .. sourcecode:: python3
        
        >>>"一個"中的"a"
        真
        在"蘋果">>>"蘋果"
        真
        "中的"a">>>"
        真
        >>>""在"蘋果"
        真
    
了``不``運算符返回`` ``中的邏輯相反的結果： 

    .. sourcecode:: python3
        
        >>>"×"不是"蘋果"
        真

結合`` ``中使用運算符與字符串連接`` `` +，我們可以
編寫一個函數，刪除所有的元音從一個字符串：

    .. sourcecode:: python3
        :linenos:
        
        高清remove_vowels（S）：
            元音="aeiouAEIOU"
            s_sans_vowels =""
            對於x在S：
                如果不是在元音字母X：
                    s_sans_vowels + = X
            返回s_sans_vowels 
           
        測試（remove_vowels（"compsci"）=="cmpsc"）
        測試（remove_vowels（"aAbEefIijOopUus"）=="bfjps"）



.. ::指數遍歷，尤里卡遍歷，短路計算，計算模式，
           計算模式

一個`` ``發現功能
-------------------

什麼是下面的函數嗎？

    .. sourcecode:: python3
        :linenos:
        
        DEF發現（跑車方向盤，CH）：
            """
              查找並返回通道的索引跑車方向盤中。  
              返回-1，如果通道不發生跑車方向盤中。
            """
            ㈨= 0
            而九<LEN（跑車方向盤）：
                跑車方向盤，如果[九] == CH：
                    返回IX
                IX + = 1
            返回-1
            
        測試（尋找（"Compsci"，"P"）== 3）
        測試（發現（"Compsci"，"C"）== 0）
        測試（發現（"Compsci"，"I"）== 6）
        測試（尋找（"Compsci"，"×"）== -1）
    

在某種意義上說，`` ``發現是索引操作符的相反。而不是採取
一個索引並提取相應的字符，它需要一個字符和
發現其中該字符出現的索引。如果未找到該字符，
該函數返回`` `` -1。

這是另一個例子，我們看到了一個循環裡面了`` ``返回語句。
如果跑車方向盤`` [九] == CH ``，該函數立即返回，打出來的
循環過早。

如果字符沒有出現在字符串中的，則程序退出循環
通常和回報`` `` -1。

計算該模式有時被稱為**尤里卡遍歷**或
*短路計算**，因為一旦我們找到我們要找的， 
我們可以叫"尤里卡！"，走短路，望而止步。


..指數：計數模式

循環和計數
--------------------

下面的程序進行計數的次數的信`` ``一個出現在
串，並在計數器模式的另一個例子在引入
：參考：``計數：

    .. sourcecode:: python3
        :linenos:
        
        高清count_a（文字）： 
            計數= 0
            對於C中的文字：
                如果c =="是"：
                    數+ = 1
            收益率（計數）

        試驗（count_a（"香蕉"）== 3）    

..指數：可選參數，默認值，參數，可選

.. _optional_parameters：

可選參數
-------------------

要查找的字符的第二或第三次出現的位置在
字符串，我們可以通過修改`` ``發現功能，增加了第三個參數為
在開始搜索字符串的位置是：

    .. sourcecode:: python3
        :linenos:
        
        高清find2（跑車方向盤，CH，啟動）：
            ㈨=啟動 
            而九<LEN（跑車方向盤）：
                跑車方向盤，如果[九] == CH：
                    返回IX
                IX + = 1
            返回-1
            
        試驗（find2（"香蕉"，"一個"，2）== 3）

呼叫`` find2（"香蕉"，"一"，2）``現在返回`` `` 3，第一項的索引
出現"一"中的"香蕉"在索引2開始搜索。什麼
`` find2（"香蕉"，"N"，3）``返回？如果說，4，有一個很好的機會，你
明白`` `` find2是如何工作的。

更妙的是，我們可以結合``找到``和`` `` find2使用
*可選參數**：

    .. sourcecode:: python3
        :linenos:
        
        DEF發現（跑車方向盤，CH，啟動= 0）：
            ㈨=啟動 
            而九<LEN（跑車方向盤）：
                跑車方向盤，如果[九] == CH：
                    返回IX
                IX + = 1
            返回-1

當一個函數有一個可選的參數，調用者可以``提供 
匹配的說法。如果第三個參數提供給`` ``找到，它就會被分配
到`` ``開始。但是，如果呼叫者留下的說法出來，然後開始發出
在函數定義的分配指示的缺省值``開始= 0 ``。
 
因此呼叫``找到（"香蕉"，"一"，2）``這個版本的`` ``找到剛才的行為
像`` `` find2，而在調用``找到（"香蕉"，"一"）`` `` ``啟動會
設置為**默認值`` 0 `` **。

添加一個可選的參數來`` ``找使得它從一個起點搜索
位置，直至但不包括結束位置：

    .. sourcecode:: python3
        :linenos:
        
        DEF發現（跑車方向盤，CH，啟動= 0，終點=無）：
            ㈨=啟動 
            如果最終是無：
               結束= LEN（跑車方向盤）
            而九<結束：
                跑車方向盤，如果[九] == CH：
                    返回IX
                IX + = 1 
            返回-1

為``結束可選值``有趣的是：我們給它一個默認值`` ``沒有如果
調用程序沒有提供任何參數。在函數體中，我們測試一下`` ``結尾是，
如果呼叫者沒有提供任何參數，我們重新分配`` ``到底是字符串的長度。
如果主叫方提供的`` ``結束爭論，但是，來電者的價值將在循環中使用。

的語義啟動`` ``和`` ``結束在這個函數中也是完全一致的，因為它們是在
了`` ``範圍功能。

下面是一些測試案例，應該通過：  

    .. sourcecode:: python3
        :linenos:
        
        ss ="Python字符串有一些有趣的方法。"
        測試（尋找（β，"S"）== 7）
        測試（尋找（β，"S"，7）== 7）
        測試（尋找（β，"S"，8）== 13）
        測試（尋找（β，"S"，8，13）== -1）
        測試（尋找（β，"。"）== LEN（β）-1）

..指數::模塊，string模塊，dir函數，點符號，函數型態，
           文檔字符串

內置`` ``找方法
----------------------------
 
現在，我們已經做了所有的工作，以編寫出功能強大`` ``找到的功能，我們可以透露，
字符串已經有了自己的內置`` ``找到方法。它可以做的一切
我們的代碼可以做，以及更多！  

    .. sourcecode:: python3
        :linenos:
        
        試驗（ss.find（"S"）== 7）
        試驗（ss.find（"S"，7）== 7）
        試驗（ss.find（"S"，8）== 13）
        試驗（ss.find（"S"，8，13）== -1）
        測試（ss.find（"。"）== LEN（ss）-1）
     
內置`` ``找到方法比我們的版本更普遍。它可以找到
子，而不僅僅是單個字符：

    .. sourcecode:: python3
        
        >>>"香蕉"。找到（"南"）
        2
        >>>"香蕉"。找到（"NA"，3）
        4

通常我們寧願使用Python提供，而不是重新發明的方法
我們自己的等價物。但很多的內置函數和方法做好
教學練習，你學習的基礎技術是您的積木
要成為一個熟練的程序員。

了`` ``分割方法
--------------------

一對字符串的最有用的方法就是`` ``分割方法：
這將一個單一的多字串為單個單詞的列表，去除
它們之間的所有空白。（空白表示任何製表符，換行符或空格。）
這使我們能夠讀取輸入作為單個字符串，
並把它分解成單詞。

    .. sourcecode:: python3 
    
        >>> ss ="嗯，我從來沒有說愛麗絲" 
        >>> WDS = ss.split（）
        WDS >>>
        ['嗯'，'I'，'永遠'，'沒有'，'說'，'愛麗絲']
    
清理你的字符串
------------------------

我們會經常與包含標點符號或製表符和換行符的字符字符串的工作，
特別是，我們將在以後的章節，看看當我們從文件中讀取或者從我們的文字 
互聯網。但是，如果我們寫一個程序，比如說，數字頻率或檢查
每個單詞的拼寫，我們寧願脫掉這些不需要的字符。

我們將展示如何從一個字符串剝離標點符號只是一個例子。
請記住，字符串是不可變的，所以我們不能用改變字符串
標點符號---我們需要遍歷原來的字符串，並創建一個新的字符串，
漏報任何標點符號：

    .. sourcecode:: python3 
        :linenos:   
     
        "！\"。？標點=＃$％＆'（）* +， -  /：; <=> @ [\ \] ^ _`{|}〜"
        
        高清remove_punctuation（S）：
            s_sans_punct =""
            字母s中：
                如果不信的標點符號：
                    s_sans_punct + =信
            返回s_sans_punct

設立了第一項任務是凌亂和容易出錯。  
幸運的是，Python的`` ``字符串模塊已經這樣做了
對我們來說。因此，我們會發出輕微改善此
節目---我們將導入了`` ``字符串模塊，並使用它的定義： 

    .. sourcecode:: python3 
        :linenos:

        進口字符串
        
        高清remove_punctuation（S）：
            s_without_punct =""
            字母s中：
                如果不信的string.punctuation：
                    s_without_punct + =信
            返回s_without_punct
     
        測試（remove_punctuation（'"嗯，我從來沒有！"愛麗絲說。'）==
                                    "嗯，我從來沒有說愛麗絲"）
        測試（remove_punctuation（"你是非常，非常，確定嗎？"）==
                                     "你是非常非常不確定"）


從上一節這個功能和`` ``分割方法一起組成
做一個有用的組合---我們將清理出標點，
`` ``分割將清理出的換行符和製表符，同時將字符串轉換成
單詞的列表：

    .. sourcecode:: python3 
           :linenos:

           my_story ="""
           蟒是蟒蛇，這意味著它們將'擠'的生活 
           他們的獵物。他們纏住圍繞他們的獵物，並與
           每次呼吸的生物受到蛇會擠壓得更緊 
           直到他們停止呼吸完全。一旦心臟停止獵物
           是整個吞下。整個動物在消化蛇的
           胃除了毛皮或羽毛。你認為是什麼發生了皮毛，
           羽毛，喙，以及蛋殼？在"額外的東西"被傳遞出來的---
           你猜對了---蛇POOP！"""
           
           WDS = remove_punctuation（my_story）。分裂（）
           打印（WDS）
       
輸出： 

    .. sourcecode:: Python會議上  
    
       ['蟒蛇'，'是'，'蟒蛇'，...，'它'，'蛇'，'POOP']                            
  
還有其他有用的字符串的方法，但是這本書並不打算
是一本參考手冊。在另一方面，* Python庫參考*
是。伴隨著豐富的其他文件，它是在
該`的Python網站<http://www.python.org>`__。


..指數：字符串格式化，對字符串的操作，格式化，字符串，理由，字段寬度

字符串格式的方法 
------------------------
 
格式化字符串在Python 3的最簡單和最有效的方法就是使用
`` ``格式的方法。要看到這是如何工作，讓我們先從幾個例子：

    .. sourcecode:: python3
        :linenos:
        
        S1 ="他的名字是{0}！"。格式（"亞瑟"）
        打印（S1）

        名稱="愛麗絲"
        年齡= 10
        S2 ="我是{1}，我{0}歲。"格式（年齡，姓名）
        打印（S2）

        N1 = 4
        N2 = 5
        S3 ="2 ** 10 = {0}和{1} * {2} = {3：F}"。格式（2 ** 10，N1，N2，N1 * N2）
        打印（S3）
    
運行該腳本生成： 

    .. sourcecode:: Python會議上
    
        他的名字是亞瑟！
        我是Alice，我10歲。
        2 ** 10 = 1024和4 * 5 = 20.000000

該模板字符串包含*佔位符*，`` ... {0} ... {1} ... {2} ...等``   
了`` ``格式的方法替換其參數傳遞到佔位。
在佔位的數字是，確定哪些參數指標
得到取代的---請確保您了解線6以上！ 

但是，還有更多！每個替代的字段也可以包含一個**格式規範** ---
它總是由``介紹：``符號（11號線上面使用的。）  
這種修改如何替換做成模板，並可以控制的東西，如：

*該字段是否靠左對齊`` <`` ``中心^ ``，或右``> ``
*寬度分配給該領域的結果字符串內（一個像`` `` 10）
*型態轉換（我們將最初只強制轉換為float，`` f ``，就像我們在做
  第11行以上的代碼，或許我們會問整數轉換使用`` X ``為十六進制）
*如果型態轉換為一個浮點數，您也可以指定多少小數位將被通緝 
  （通常，`` .2 f ``是與貨幣合作，以小數點後兩位是有用的。）

讓我們做，應該是足以滿足大多數需求了幾個簡單常見的例子。如果您需要
做任何事情，更深奧的，用*幫助*和讀取所有的強大，血淋淋的細節。

    .. sourcecode:: python3
        :linenos:

        N1 ="巴黎"
        N2 ="惠特尼"
        N3 ="希爾頓"

        打印（"圓周率小數點後三位是{0：.3 F}"格式（3.1415926））
        打印（"123456789 123456789 123456789 123456789 123456789 123456789"）
        打印（"| | | {0：<15} | | | {1：15 ^} | | | {2：> 15} | | |生於{3} | | |" 
                。格式（N1，N2，N3，1981））
        打印（"十進制值{0}轉換為十六進制值{0：X}"
                。格式（123456））

這個腳本生成的輸出： 

    .. sourcecode:: Python會議上

        圓周率到小數點後三位是3.142
        123456789 123456789 123456789 123456789 123456789 123456789
        | | |巴黎| | |惠特尼| | |希爾頓| | | 1981年出生| | |
        十進制值123456轉換為十六進制值1e240
    
你可以有多個佔位符的索引
同樣道理，或者甚至有沒被引用的額外的參數
在所有：

    .. sourcecode:: python3
        :linenos:

        字母="""
        尊敬的{0} {2}。
         {0}，我有一個有趣的賺錢命題為您服務！
         如果你存千萬美元到我的銀行賬戶，我可以 
         雙倍的錢......
        """

        打印（letter.format（"巴黎"，"惠特尼"，"希爾頓"））
        打印（letter.format（"條例"，"亨利"，"蓋茨"））
    
這將產生以下：

    .. sourcecode:: Python會議上
        
        親愛的帕麗斯·希爾頓。
         巴黎，我有一個有趣的賺錢命題為您服務！
         如果你存千萬美元到我的銀行賬戶，我可以
         雙倍的錢......
         
         
        親愛的比爾·蓋茨。
         比爾，我有一個有趣的賺錢命題為您服務！
         如果你存千萬美元到我的銀行賬戶，我可以
         雙倍的錢......


正如你所期望的，你會得到一個索引錯誤，如果 
您的佔位符引用的論據，你不提供： 

    .. sourcecode:: python3
    
        >>>"你好{3}"格式（"戴夫"）
        追踪（最新最後調用）：
          文件"<interactive input>"，1號線，在的<module>
        IndexError：元組索引超出範圍
    
下面的例子說明字符串格式化的真正效用。
首先，我們將嘗試打印一個表而不使用字符串格式化：

    .. sourcecode:: python3
        :linenos:
        
        打印（"I \ TI ** 2 \ TI ** 3 \ TI ** 5 \ TI ** 10 \ TI ** 20"）
        因為我在範圍（1，11）：
            打印（我，"\ t"的，我** 2，"\ t"的，我** 3，"\ t"的，我** 5，"\ t"的， 
                                                    我** 10，"\ t"的，我** 20）

該程序打印出的數字從1到10的各種權力的表。
（這是假設的標籤寬度為8。您可能會看到
什麼比這更糟糕的，如果你標籤寬度設置為4。）
在其目前的形式，它依賴於製表符（`` \噸``）來對齊
值的列，但是這個分解時，在表中的值變大
比標籤寬度：

    .. sourcecode:: Python會議上
        
        （二）** 2 **我我3 ** 5 **我10我20 **
        1 1 1 1 1 1
        2 4 8 32 1024 1048 576
        3 9 27 243 5904 9 3486784401
        4 16 64 1024 1048 576 1099511627776
        5 25 125 3125 9765625 95367431640625
        6 36 216 7776 60466176 3656158440062976
        7 49 343 1680 7 282475249 79792266297612001
        8 64 512 3276 8 1073741824 1152921504606846976
        9 81 729 5904 9 3486784401 12157665459056928801
        10 100 1000 1000 00百億100000000000000000000

一個可能的解決辦法是改變標籤的寬度，但第一列
已經有更多的空間比它需要。最好的解決辦法是設置
寬度分別獨立柱。正如你可能已經猜到了，串
格式提供了一個更漂亮的解決方案。我們也可以右對齊每個字段：

    .. sourcecode:: python3
        :linenos:
            
        佈局="{0：> 4} {1：> 6} {2：> 6} {3：> 8} {4：> 13} {5：> 24}"

        打印（layout.format（"我"，"我** 2"，"我** 3"，"我** 5"，"我** 10"，"我** 20"））
        因為我在範圍（1，11）：
            打印（layout.format（I，I * 2，我** 3，我** 5，**我10，我** 20））
 

運行此版本會產生以下（更令人滿意）輸出： 

    .. sourcecode:: Python會議上
        
       （二）** 2 **我我3 ** 5 **我10我20 **
       1 1 1 1 1 1
       2 4 8 32 1024 1048 576
       3 9 27 243 5904 9 3486784401
       4 16 64 1024 1048 576 1099511627776
       5 25 125 3125 9765625 95367431640625
       6 36 216 7776 60466176 3656158440062976
       7 49 343 1680 7 282475249 79792266297612001
       8 64 512 3276 8 1073741824 1152921504606846976
       9 81 729 5904 9 3486784401 12157665459056928801
      10 100 1000 1000 00百億100000000000000000000


總結 
------- 

本章介紹了很多新的想法。以下概要
可以證明是有益的記憶中你學到了什麼。

詞彙表.. ::

    索引（`` [] ``）
        訪問單個字符在使用它的位置（從開始一個字符串
        0）。例如：``"這個"[2] ``評估為``"我"``。

    length函數（`` `` LEN）
        返回字符串中的字符數。例如：
        `` LEN（"高興"）``評估為`` `` 5。

    for循環遍歷（`` ``為）
        * *遍歷字符串表示字符串中訪問的每個字符，一是
        在一個時間。例如，下面的for循環：

            .. sourcecode:: python3

                為CH IN"例子"：
                    ...

        用``每次``通道的不同值執行循環體的7倍。

    切片（`` [：] ``）
        A *片*是一個字符串的子串。例如：``'香蕉和
        霜'[3:6] ``評估為`` ``全日空（所以沒有``'香蕉和
        霜'[1:4] ``）。

    字符串比較（``>，<，> =，<=，==，！= ``）
        六種常見的比較操作符與字符串工作，根據評估
        ``字典順序。示例：
        ``"蘋果"<"香蕉"``計算結果為真`` ``。``"澤塔"<"Appricot"``
        計算結果為假`` ``。``"斑馬"<="土豚"``計算結果為
        `` ``真，因為所有的大寫字母優先於小寫字母。

    中，而不是在運營商（`` ``中``不``）
        了`` ``在運營商測試會員。在的情況下
        字符串，它測試一個字符串中是否包含在另一個
        字符串。例如：在``"見鬼"``"我會檢查你的。"
        計算結果為真`` ``。在"我將檢查``"奶酪"
        你。"``評估為`` ``假。


詞彙表
--------

詞彙表.. ::

    複合資料型態
        在該值的部件，或元件組成的一種資料型態，
        那些本身的值。

    默認值
        給一個可選參數，如果沒有參數，因為這是價值
        在函數調用中提供。

    文檔字符串
        在函數或模塊定義的第一行字符串常量
        （正如我們將在後​​面看到，在類和方法的定義，以及）。
        文檔字符串提供了一種方便的方式來與文檔相關聯
        代碼。文檔字符串也使用編程工具提供交互式幫助。

    點符號
        使用**點操作符**，`` ``，訪問方法和對象的屬性。

    不可變資料的價值
        它不能被修改的資料值。分配到元素或
        片不可變值（子部分）會導致運行時錯誤。

    指數
        變量或值用來選擇一個有序集合的成員，如
        一個字符從字符串，或從列表中的一個元素。

    可變資料值
        它可以被修改的資料值。所有可變的值型態
        是複合型態。列表和字典是可變的;字符串
        和元組都沒有。

    可選參數
        寫在同一個分配給一個函數頭的參數
        默認值就可以收到，如果沒有相應的參數是
        在函數調用給出了它。
        
    短路計算
        節目的風格，只要在快捷方式的額外工作 
        結果是肯定知道。在本章中我們`` ``找
        功能盡快找到它一直在尋找退換;它
        沒有穿過的所有項目，其餘的字符串中。

    片
        一個字符串（子）由一系列指數中指定的一部分。更多
        一般地，可以創建在Python任何序列型態的子序列
        使用切片操作符（``序列[啟動：停止] ``）。

    橫
        遍歷一個集合中的元素，表演了類似的
        操作上的每個。

    空白
        任何移動光標不可​​見的印刷字符
        字符。恆`` `` string.whitespace包含所有
        空白字符。


演習
---------

我們建議您創建一個包含從我們前面的章節測試腳手架的單個文件，
並把需要測試到該文件中的所有功能。 

＃。什麼是下列各項的結果：

    .. sourcecode:: python3
    
        >>>"巨蟒"[1]
        >>>"字符串是字符的序列。"[5]
        >>> LEN（"妙"）
        >>>"謎"[：4]
        在"菠蘿">>>"P"
        在"菠蘿">>>"蘋果"
        >>>"梨"不"菠蘿"
        >>>"蘋果">"菠蘿"
        >>>"菠蘿"<"桃花源記"
    
＃。修改：

       .. sourcecode:: python3
           :linenos:
        
           前綴="JKLMNOPQ"
           後綴="確認"
           
           對於信中的前綴：
               打印（字母+後綴）

   讓`` Ouack ``和``嘎嘎``拼寫正確。
   
＃。封裝

       .. sourcecode:: python3
           :linenos:
        
           水果="香蕉"
           計數= 0
           對於char的水果：
               如果字符=="是"：
                   數+ = 1
           打印（計數）

   在一個名為函數`` `` count_letters，並推廣它，這樣它接受
   字符串和字母作為參數。使函數返回數
   的字符，而不是打印的答案。調用者應該做的印刷。
     
＃。現在，重寫`` `` count_letters功能，這樣，而不是遍歷
   字符串，它重複調用`` ``找方法，使用可選的第三個參數 
   找到正在清點信新出現的。
   
＃。賦值給一個變量在程序中包含三重引號的字符串
   你最喜歡的一段文字---也許是一首詩，一講話，指示
   烤蛋糕，一些鼓舞人心的詩句等。

   寫一個函數，它刪除所有標點符號的字符串，打破了字符串
   進言，和計數的列表的話，在你的文字中包含數
   在字母"e"。你的程序應該打印這樣的文本分析：
   
       .. sourcecode:: Python會議上

           您的文本包含243字，其中109（44.8％）包含一個"e"。      

＃。打印這樣一個整潔尋找乘法表：

       .. sourcecode:: Python會議上
       
                  1 2 3 4 5 6 7 8 9 10 11 12
            ：------------------------------------------------- - 
           1：1 2 3 4 5 6 7 8 9 10 11 12
           2：2 4 6 8 10 12 14 16 18 20 22 24
           3：3 6 9 12 15 18 21 24 27 30 33 36
           4：4 8 12 16 20 24 28 32 36 40 44 48
           5：5 10 15 20 25 30 35 40 45 50 55 60
           6：6 12 18 24 30 36 42 48 54 60 66 72
           7：7 14 21 28 35 42 49 56 63 70 77 84
           8：8 16 24 32 40 48 56 64 72 80 88 96
           9：9 18 27 36 45 54 63 72 81 90 99 108
          10：10 20 30 40 50 60 70 80 90 100 110 120
          11：11 22 33 44 55 66 77 88 99 110 121 132
          12：12 24 36 48 60 72 84 96 108 120 132 144

＃。編寫一個函數，它的反轉字符串參數，並滿足這些測試：

       .. sourcecode:: python3
           :linenos:
           
           測試（反向（"高興"）=="yppah"）
           測試（反向（"巨蟒"）=="nohtyP"）
           測試（反向（""）==""）
           測試（反向（"一"）=="a"）的
   
＃。編寫一個函數，反映了它的參數：

       .. sourcecode:: python3
           :linenos:
          
           測試（鏡子（"好"）=="gooddoog"）
           測試（鏡子（"巨蟒"）=="PythonnohtyP"）
           測試（鏡子（""）==""）
           測試（鏡子（"A"）=="AA"）

＃。寫一個函數，從一個字符串刪除給定的字母出現的所有：
    
        .. sourcecode:: python3
            :linenos:   
            
            測試（remove_letter（"A"，"蘋果"）=="pple"）
            試驗（remove_letter（"一"，"香蕉"）=="BNN"）
            試驗（remove_letter（"Z"，"香蕉"）=="香蕉"）
            測試（remove_letter（"I"，"密西西比"）=="Msssspp"）
            試驗（remove_letter（"B"，""）=""）
            試驗（remove_letter（"B"，"C"）="C"）

＃。編寫一個函數，識別回文。（提示：使用你的`` ``反向功能，使這個容易！）：

        .. sourcecode:: python3
            :linenos:   
            
            測試（is_palindrome（「阿爸」））
            測試（不is_palindrome（"ABAB"））
            測試（is_palindrome（「宗旨」））
            測試（不is_palindrome（"香蕉"））
            測試（is_palindrome（"救命稻草疣"））
            試驗（is_palindrome（"一"））
            ＃測試（is_palindrome（""））＃是一個空字符串回文？

＃。編寫一個函數，計算了多少次的子串出現在一個字符串：
   
        .. sourcecode:: python3
            :linenos: 
            
            測試（計數（"是"，"密西西比"）== 2）
            試驗（計數（"一"，"香蕉"）== 2）
            測試（計數（"安娜"，"香蕉"）== 2）
            試驗（計數（"NANA"，"香蕉"）== 1）
            試驗（計數（"南安"，"香蕉"）== 0）
            測試（計數（"AAA"，"AAAAAA"）== 4）
   
＃。寫一個函數，可以消除在另外一個字符串中首次出現的：

        .. sourcecode:: python3
            :linenos: 
            
            測試（刪除（"一"，"香蕉"）=="彼岸花"）
            測試（刪除（"CYC"，"自行車"）=="膽"）
            測試（刪除（"國際空間站"，"密西西比"）=="Missippi"）
            測試（刪除（"蛋"，"自行車"）=="自行車"）
 
＃。寫一個函數，刪除一個字符串的所有匹配從另一字符串：

        .. sourcecode:: python3
            :linenos: 
            
            測試（remove_all（"一"，"香蕉"）=="把"）
            測試（remove_all（"CYC"，"自行車"）=="膽"）
            測試（remove_all（"國際空間站"，"密西西比"）=="Mippi"）
            測試（remove_all（"蛋"，"自行車"）=="自行車"）